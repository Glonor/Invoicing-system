require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe EventsController, type: :controller do

  let(:user) {FactoryBot.create(:user)}
  let(:client) {FactoryBot.create(:client)}

  before do
    log_in_as(user)
  end

  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {
      :title => "MyString",
      :description => "MyText",
      :billed => false,
      :start_time => "2017-12-05 12:54:00",
      :end_time => "2017-12-05 13:54:00",
      :client_id => client.id
    }
  }

  let(:invalid_attributes) { {
      :title => "MyString",
      :description => "MyText",
      :billed => false,
      :start_time => "2017-12-05 13:54:00",
      :end_time => "2017-12-05 12:54:00"
    }
  }

  describe "GET #index" do
    it "returns a success response" do
      event = Event.create! valid_attributes
      get :index, params: {client_id: client.id}
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      event = Event.create! valid_attributes
      get :show, params: {client_id: client.id, id: event.to_param}
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {client_id: client.id}
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      event = Event.create! valid_attributes
      get :edit, params: {client_id: client.id, id: event.to_param}
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Event" do
        expect {
          post :create, params: {client_id: client.id, event: valid_attributes}
        }.to change(Event, :count).by(1)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {client_id: client.id, event: invalid_attributes}
        expect(response).to be_success
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
            :title => "NewMyString"
        }
      }

      it "updates the requested event" do
        event = Event.create! valid_attributes
        put :update, params: {client_id: client.id, id: event.to_param, event: new_attributes}
        event.reload
        expect(event.attributes).to include( { "title" => "NewMyString" } )
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        event = Event.create! valid_attributes
        put :update, params: {client_id: client.id, id: event.to_param, event: invalid_attributes}
        expect(response).to be_success
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested event" do
      event = Event.create! valid_attributes
      expect {
        delete :destroy, params: {client_id: client.id, id: event.to_param}
      }.to change(Event, :count).by(-1)
    end
  end

end
